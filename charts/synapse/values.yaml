---
synapse:
  serverName: NOT-CONFIGURED
  matrixAuthenticationServiceEndpoint: ''
  # cfg ++
  enable_3pid_changes: false
  allow_profile_lookup_over_federation: false
  allow_device_name_lookup_over_federation: false
  search_all_users: false
  allow_public_rooms_over_federation: false
  # The maximum allowed duration by which sent events can be delayed, as per MSC4140.
  max_event_delay_duration: ''  # 24h
  # cfg --
  image:
    repository: "ghcr.io/code-tool/matrix-stack/synapse"
    # varsion with git+https://github.com/davefatkin/synapse-s3-storage-provider.git#egg=synapse-s3-storage-provider
    tag: "v1.137.0"
    pullPolicy: IfNotPresent
  autoscaling:
    enabled: true
  nodeSelector: {}
  tolerations: []
  affinity: {}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 25%
  # this workers can scale in runtime
  resourcesDefaults:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      memory: 2Gi
  autoscalingWorkers:
    federation_sender:
      replicas: 1
      resources: {}
      # https://keda.sh/docs/2.17/scalers/cron/
      kedaAutoscaling:
        enabled: false
        timezone: "Europe/Kyiv"
        start: "0 9 * * *"
        end: "0 19 * * *"
        desiredReplicas: 5
        minReplicaCount: 2
      # HPA
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 10
    client_reader:
      replicas: 2
      resources: {}
      # https://keda.sh/docs/2.17/scalers/cron/
      kedaAutoscaling:
        enabled: false
        timezone: "Europe/Kyiv"
        start: "0 9 * * *"
        end: "0 19 * * *"
        desiredReplicas: 15
        minReplicaCount: 5
      # HPA
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 10
    event_creator:
      replicas: 2
      resources: {}
      # https://keda.sh/docs/2.17/scalers/cron/
      kedaAutoscaling:
        enabled: false
        timezone: "Europe/Kyiv"
        start: "0 9 * * *"
        end: "0 19 * * *"
        desiredReplicas: 5
        minReplicaCount: 2
      # HPA
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 10
    media_repository:
      replicas: 2
      resources: {}
      # https://keda.sh/docs/2.17/scalers/cron/
      kedaAutoscaling:
        enabled: false
        timezone: "Europe/Kyiv"
        start: "0 9 * * *"
        end: "0 19 * * *"
        desiredReplicas: 5
        minReplicaCount: 2
      # HPA
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 10
  # this workers will scale after deploy
  deployScalingWorkersPdb:
    enabled: true
    minAvailable: 1
  deployScalingWorkers:
    event_persister:
      replicas: 2
      resources: {}
    pusher:
      replicas: 1
      resources: {}
  # this workers will neewr scale, only vertical scaling is possible
  singletonWorkers:
    master:
      replicas: 1
      resources: {}
    account_data:
      replicas: 1
      resources: {}
    presence:
      replicas: 1
      resources: {}
    typing:
      replicas: 1
      resources: {}
    background_worker:
      replicas: 1
      resources: {}
    receipts:
      replicas: 1
      resources: {}
    keys:
      replicas: 1
      resources: {}
    to_device:
      replicas: 1
      resources: {}
    media_repository_background_jobs:
      replicas: 1
      resources: {}
  presence: true
  postgres:
    cp_max: 50
    cp_min: 5
    txn_limit: 10000
    host: "NOT-CONFIGURED4"
    dbname: "synapse"
    user: "synapse"
    password: "NOT-CONFIGURED"
  pgbouncer:
    image:
      repository: "bitnami/pgbouncer"
      tag: "1.24.1-debian-12-r10"
      pullPolicy: IfNotPresent
    replicas: 2
    # set thish gt 0 if you want to enable serveice sessionAffinity by ClientIP
    sessionAffinityTimeoutSeconds: 0
    podDisruptionBudget:
      ebabled: true
      # Define either 'minAvailable' or 'maxUnavailable', never both.
      minAvailable: 1
      # -- Maximum unavailable pods set in PodDisruptionBudget. If set, 'minAvailable' is ignored.
      # maxUnavailable: 1
    authType: "md5"
    maxClientConn: "8192"
    poolSize: "20"
    poolMode: "transaction"
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
        maxSurge: 25%
    priorityClassName: ''
    topologySpreadConstraints: []

  redis:
    enabled: true
    host: redis
    port: 6379

  podMonitor:
    enabled: false

  forgotten_room_retention_period: 7d
  user_ips_max_age: 1y
  retention:
    enabled: false
    default_policy:
      min_lifetime: 1d
      max_lifetime: 3y
    allowed_lifetime_min: 1d
    allowed_lifetime_max: 3y
    purge_jobs:
      - longest_max_lifetime: 3d
        interval: 12h
      - shortest_max_lifetime: 3d
        interval: 1d

rc_message:
  per_second: 100
  burst_count: 300
  # recommended for MSC3266
  # This needs to match at least the heart-beat frequency plus a bit of headroom
  # Currently the heart-beat is every 5 seconds which translates into a rate of 0.2s
  # per_second: 0.5
  # burst_count: 30

federation_domain_whitelist: []

federation_metrics_domains: []

password_enabled: false
password_providers: []

oidc_providers: []

idp_metadata: []

registration_shared_secret: NOT-CONFIGURED

media_storage_providers: []

identity_server_vector: false
openid_configuration: true
experimentalFeatures:
  # TODO: check feature codes
  msc3575:
    enabled: true
  msc2965:
    enabled: true
  msc3967:
    enabled: true
  msc3861:
    # enabled by matrixAuthentication.enabled, deprecated section
    # enabled: true
    issuer: NOT-CONFIGURED
    client_id: NOT-CONFIGURED
    client_auth_method: client_secret_basic
    client_secret: NOT-CONFIGURED
    admin_token: NOT-CONFIGURED
    account_management_url: NOT-CONFIGURED
  msc3266:
    enabled: false

ingress:
  secretName: ''
  commonAnnotations:
    nginx.org/client-max-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "320"
  annotations: {}
  masterRoutes:
    - "/_matrix/"
    - "/_synapse/"
  federationSenderRoutes:
    # Federation requests
    - "/_matrix/federation/v1/version$"
    - "/_matrix/federation/v1/event/"                                           # https://matrix-org.github.io/synapse/latest/workers.html#synapseappgeneric_worker
    - "/_matrix/federation/v1/state/"
    - "/_matrix/federation/v1/state_ids/"
    - "/_matrix/federation/v1/backfill/"
    - "/_matrix/federation/v1/get_missing_events/"
    - "/_matrix/federation/v1/publicRooms"
    - "/_matrix/federation/v1/query/"
    - "/_matrix/federation/v1/make_join/"
    - "/_matrix/federation/v1/make_leave/"
    - "/_matrix/federation/(v1|v2)/send_join/"
    - "/_matrix/federation/(v1|v2)/send_leave/"
    - "/_matrix/federation/v1/make_knock/"
    - "/_matrix/federation/v1/send_knock/"
    - "/_matrix/federation/(v1|v2)/invite/"
    - "/_matrix/federation/v1/event_auth/"
    - "/_matrix/federation/v1/timestamp_to_event/"
    - "/_matrix/federation/v1/exchange_third_party_invite/"
    - "/_matrix/federation/v1/user/devices/"
    - "/_matrix/key/v2/query"
    - "/_matrix/federation/v1/hierarchy/"
    # Inbound federation transaction request
    - "/_matrix/federation/v1/send/"
  accountData:
    # Account data requests
    - "/_matrix/client/(r0|v3|unstable)/.*/tags"                                # https://matrix-org.github.io/synapse/latest/workers.html#synapseappgeneric_worker
    - "/_matrix/client/(r0|v3|unstable)/.*/account_data"
  presence:
    # Presence requests
    - "/_matrix/client/(api/v1|r0|v3|unstable)/presence/"                       # https://matrix-org.github.io/synapse/latest/workers.html#the-presence-stream
  mediaRepository:
    - "/_matrix/media/"                                                         # https://matrix-org.github.io/synapse/latest/workers.html#synapseappmedia_repository
    - "/_matrix/client/v1/media/"
    - "/_matrix/federation/v1/media/"
    - "/_synapse/admin/v1/purge_media_cache$"
    - "/_synapse/admin/v1/room/.*/media.*$"
    - "/_synapse/admin/v1/user/.*/media.*$"
    - "/_synapse/admin/v1/media/.*$"
    - "/_synapse/admin/v1/quarantine_media/.*$"
    - "/_synapse/admin/v1/users/.*/media$"
  toDevice:
    - "/_matrix/client/(r0|v3|unstable)/sendToDevice/"                          # https://matrix-org.github.io/synapse/latest/workers.html#the-to_device-stream
  typing:
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/typing"                 # https://matrix-org.github.io/synapse/latest/workers.html#the-typing-stream
  receipts:
    # Receipts requests
    - "/_matrix/client/(r0|v3|unstable)/rooms/.*/receipt"                       # https://matrix-org.github.io/synapse/latest/workers.html#the-receipts-stream
    - "/_matrix/client/(r0|v3|unstable)/rooms/.*/read_markers"
  keys:
    # Encryption requests
    - "/_matrix/client/(r0|v3|unstable)/keys/query$"                            # https://matrix-org.github.io/synapse/latest/workers.html#synapseappgeneric_worker
    - "/_matrix/client/(r0|v3|unstable)/keys/changes$"
    - "/_matrix/client/(r0|v3|unstable)/keys/claim$"
    - "/_matrix/client/(r0|v3|unstable)/room_keys/"
    - "/_matrix/client/(r0|v3|unstable)/keys/upload/"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/keys/device_signing/upload$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/keys/signatures/upload$"
  eventCreator:
    # Event sending requests
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/redact"                 # https://matrix-org.github.io/synapse/latest/workers.html#synapseappgeneric_worker
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/send"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state/"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/(join|invite|leave|ban|unban|kick)$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/join/"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/knock/"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/profile/"
  matrixAuthentication:
    - "/_matrix/client/(.*)/(login|logout|refresh)"
  # disabled if MAS is enabled
  clientReaderRegister:
    # Registration/login requests
    - "/_matrix/client/(api/v1|r0|v3|unstable)/login$"
    - "/_matrix/client/(r0|v3|unstable)/register$"
    - "/_matrix/client/(r0|v3|unstable)/register/available$"
    - "/_matrix/client/v1/register/m.login.registration_token/validity$"
    - "/_matrix/client/(r0|v3|unstable)/password_policy$"
  clientReaderStickyRoutes:
    # Sync requests
    - "/_matrix/client/(r0|v3)/sync$"
    - "/_matrix/client/(api/v1|r0|v3)/events$"
    - "/_matrix/client/(api/v1|r0|v3)/initialSync$"
    - "/_matrix/client/(api/v1|r0|v3)/rooms/[^/]+/initialSync$"
    # Pagination
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/messages$"
  clientReaderRoutes:
    # Client API requests
    - "/_matrix/client/(api/v1|r0|v3|unstable)/createRoom$"                     # https://matrix-org.github.io/synapse/latest/workers.html#synapseappgeneric_worker
    - "/_matrix/client/(api/v1|r0|v3|unstable)/publicRooms$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/joined_members$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/context/.*$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/members$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state$"
    - "/_matrix/client/v1/rooms/.*/hierarchy$"
    - "/_matrix/client/(v1|unstable)/rooms/.*/relations/"
    - "/_matrix/client/v1/rooms/.*/threads$"
    - "/_matrix/client/unstable/im.nheko.summary/summary/.*$"
    - "/_matrix/client/(r0|v3|unstable)/account/3pid$"
    - "/_matrix/client/(r0|v3|unstable)/account/whoami$"
    - "/_matrix/client/(r0|v3|unstable)/account/deactivate$"
    - "/_matrix/client/(r0|v3)/delete_devices$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/devices(/|$)"
    - "/_matrix/client/versions$"
    # api v1 ++
    - "/_matrix/client/(api/v1|r0|v3|unstable)/account/3pid$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/account/whoami$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/sync$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/devices"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/room_keys"
    # api v1 --
    - "/_matrix/client/(api/v1|r0|v3|unstable)/voip/turnServer$"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/event/"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/joined_rooms$"
    - "/_matrix/client/v1/rooms/.*/timestamp_to_event$"
    - "/_matrix/client/(api/v1|r0|v3|unstable/.*)/rooms/.*/aliases"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/search$"
    - "/_matrix/client/(r0|v3|unstable)/user/.*/filter(/|$)"
    - "/_matrix/client/(api/v1|r0|v3|unstable)/directory/room/.*$"
    - "/_matrix/client/(r0|v3|unstable)/capabilities$"
    - "/_matrix/client/(r0|v3|unstable)/notifications$"
    - "/_synapse/admin/v1/rooms/[^/]+$"
    # ? "/_synapse/admin/v1/rooms/" # https://github.com/element-hq/synapse/blob/v1.133.0/docs/workers.md has error ?
    # User directory search requests
    - "/_matrix/client/(r0|v3|unstable)/user_directory/search$"
  # experimental_features.msc3861.enabled set to true
  # TODO: decide if worker needed
  #msc3861Routes / MAS additional routes:
  #  - "/_synapse/admin/v2/users/[^/]+$"
  #  - "/_synapse/admin/v1/username_available$"
  #  - "/_synapse/admin/v1/users/[^/]+/_allow_cross_signing_replacement_without_uia$"
  #  - "/_synapse/admin/v1/users/[^/]+/devices$"

admin:
  ingress:
    enabled: true
    secretName: ''
    serverName: NOT-CONFIGURED
    commonAnnotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 50m
      nginx.ingress.kubernetes.io/use-regex: "true"
    annotations: {}
  image:
    repository: "ghcr.io/etkecc/synapse-admin"
    tag: "v0.11.1-etke47"
    pullPolicy: IfNotPresent
  replicas: 1
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  updateStrategy: {}

envoyProxy:
  enabled: true
  admin:
    port: 9901
  metrics: true
  service:
    type: ClusterIP
    port: 80
  replicaCount: 2
  podDisruptionBudget:
    ebabled: true
    # Define either 'minAvailable' or 'maxUnavailable', never both.
    minAvailable: 1
    # -- Maximum unavailable pods set in PodDisruptionBudget. If set, 'minAvailable' is ignored.
    # maxUnavailable: 1
  image:
    repository: envoyproxy/envoy
    tag: v1.31.10
    pullPolicy: IfNotPresent
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 64Mi
  #  requests:
  #    cpu: 100m
  #    memory: 64Mi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 25%
  priorityClassName: ''
  topologySpreadConstraints: []
  # example
  #topologySpreadConstraints:
  #  - maxSkew: 1
  #    topologyKey: failure-domain.beta.kubernetes.io/zone
  #    whenUnsatisfiable: ScheduleAnyway
  #    labelSelector:
  #      matchLabels:
  #        kubernetes.io/os: linux

matrixAuthentication:
  enabled: true
  service:
    type: ClusterIP
    port: 80
  replicaCount: 2
  podDisruptionBudget:
    ebabled: true
    #minAvailable: 1
    # Define either 'minAvailable' or 'maxUnavailable', never both.
    minAvailable: 1
    # -- Maximum unavailable pods set in PodDisruptionBudget. If set, 'minAvailable' is ignored.
    # maxUnavailable: 1
  image:
    repository: ghcr.io/element-hq/matrix-authentication-service
    tag: 1.1.0
    pullPolicy: IfNotPresent
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 64Mi
  #  requests:
  #    cpu: 100m
  #    memory: 64Mi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 25%
  priorityClassName: ''
  topologySpreadConstraints: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: false
  ingress:
    enabled: true
    host: NOT-CONFIGURED
    secretName: ''
    commonAnnotations:
      nginx.org/client-max-body-size: "50m"
      nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    annotations:  {}
  config:
    clients: []
    database:
      host: NOT-CONFIGURED
      port: 5432
      username: mas_user
      password: NOT-CONFIGURED
      database: mas
      max_connections: 10
      min_connections: 0
      connect_timeout: 30
      idle_timeout: 600
      max_lifetime: 1800
    secrets:
      encryption: NOT-CONFIGURED
      keys: []
    #secrets: {}
    #  encryption: 64key
    #  keys:
    #    - kid: qWE4rT6YUI
    #      key: |
    #        -----BEGIN RSA PRIVATE KEY-----
    #        -----END RSA PRIVATE KEY-----
    passwords:
      enabled: false
      schemes:
        - version: 1
          algorithm: argon2id
    upstream_oauth2:
    #  google:
    #    - id: NOT-CONFIGURED
    #      client_id: "NOT-CONFIGURED"
    #      client_secret: "NOT-CONFIGURED"
      providers: []
  configYaml: |
    telemetry:
      tracing:
        exporter: none
        propagators: []
      metrics:
        exporter: prometheus
      sentry:
        dsn: null
    templates:
      path: /usr/local/share/mas-cli/templates/
      assets_manifest: /usr/local/share/mas-cli/manifest.json
      translations_path: /usr/local/share/mas-cli/translations/
    email:
      from: '"Authentication Service" <root@localhost>'
      reply_to: '"Authentication Service" <root@localhost>'
      transport: blackhole
    policy:
      wasm_module: /usr/local/share/mas-cli/policy.wasm
      client_registration_entrypoint: client_registration/violation
      register_entrypoint: register/violation
      authorization_grant_entrypoint: authorization_grant/violation
      password_entrypoint: password/violation
      email_entrypoint: email/violation
      data: null
    branding:
      service_name: null
      policy_uri: null
      tos_uri: null
      imprint: null
      logo_uri: null
    experimental:
      access_token_ttl: 300
      compat_token_ttl: 300

form_secret: "NOT-CONFIGURED"

macaroon_secret_key: "NOT-CONFIGURED"

turn_uris: []
#  - "turn:turn.test.com?transport=udp"
#  - "turn:turn.test.com?transport=tcp"

signing_key: NOT-CONFIGURED

coturn:
  sharedSecret: ''

wellKnown:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  updateStrategy: {}
  ingress:
    commonAnnotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
    annotations: {}
  resources:
    requests:
      cpu: 20m
      memory: 64Mi

resourceQuota:
  enabled: true

livekitServer:
  ingress:
    host: ''
